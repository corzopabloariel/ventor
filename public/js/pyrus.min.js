/**
 * @param e - entidad perteneciente al array de entidades
 * @param data - json de data que puede ser Ãºtil en los formularios, por el momento PYRUS no maneja relaciones
 * @param dataPYRUS - json para completar datos ENUM. TIPOS OP: Object con la informacion k:v / JSON: elemento a parsear
 */
Pyrus = function( e = null, dataPYRUS = null , urlFile = null) {
	this.entidad = e; // entidad que se pasa por parametro
	this.objeto = null;
    this.especificacion = null;
    
    this.constructor = function() {
		if(this.entidad === null || this.entidad === "") {
			console.log("AVISO: No se ha pasado ninguna entidad. Uso limitado");
			// no hago ninguna operacion de carga
			return false;
		}
        /* ------------------- */
        this.objeto = ENTIDADES[this.entidad];
        /* ------------------- */
        this.getEspecificacion();
    };
    
    this.objetoLimpio = function() {
		let r = {};
		for(var i in this.especificacion) {
			r[i] = null;
		}
		return r;
    };
    this.columnas = function() {
        let Arr = [];
        for(let x in this.especificacion) {
            if(this.especificacion[x].VISIBILIDAD != "TP_VISIBLE" && this.especificacion[x].VISIBILIDAD != "TP_VISIBLE_TABLE") continue;
            width = "auto";
            class_ = "";
            name = x.toUpperCase();
            if(this.especificacion[x].NOMBRE !== undefined)
                name = this.especificacion[x].NOMBRE.toUpperCase();
            if(this.especificacion[x].WIDTH !== undefined) 
                width = this.especificacion[x].WIDTH;
            if(this.especificacion[x].CLASS !== undefined) 
                class_ = this.especificacion[x].CLASS
            Arr.push({ NAME: name, COLUMN: x, WIDTH: width, CLASS: class_ });
        }
        return Arr;
    }
    this.getEspecificacion = function() {
        this.especificacion = this.objeto['ATRIBUTOS'];
    };
    this.formulario = function(id = "", multiple = null) {
        if(this.objeto['FORM'] === undefined) return "";
		let formulario = "";
        let OBJ_funciones = {}
        let ARR_form = Object.assign({}, this.objeto['FORM']);

        if (this.objeto['FORM_CLASS'] === undefined) this.objeto['FORM_CLASS'] = 'form-control';
        let STR_class = this.objeto['FORM_CLASS'];

        if (this.objeto['FUNCIONES'] !== undefined) OBJ_funciones = this.objeto['FUNCIONES'];
        for(let i in ARR_form) {
            let row = ARR_form[i];
            let TEXT_row = "";
            TEXT_row += '<div class="row justify-content-center align-items-center">';
            for(let e in row) {
                let aux = "";
                let auxROW = "";
                let auxHTML = "";
                let AUX_nombre = e + (id != "" ? `_${id}` : "");
                let OBJ_funcion = {};
                if (OBJ_funciones[e] !== undefined)
                    OBJ_funcion = this.objeto['FUNCIONES'][e];
                if(e == "BTN") {
                    if(typeof row[e] == "string") 
                        aux = '<button type="submit" class="btn btn-block btn-success"><i class="fas fa-check"></i></button>';
                    else {
                        aux = `<button onclick="${row[e].ONCLICK}" type="button" onclick="" class="btn ${row[e].CLASS}">${row[e].NOMBRE}</button>`;
                        auxHTML = row[e].H;
                    }
                } else {
                    aux = this.inputAdecuado(this.especificacion[e], e, AUX_nombre, STR_class, OBJ_funcion, this.especificacion[e].PLACEHOLDER === undefined ? "" : this.especificacion[e].PLACEHOLDER, multiple);
                    if(this.objeto.PLACEHOLDER !== undefined) {
                        aux += `<label for="">${this.especificacion[e].PLACEHOLDER === undefined ? this.especificacion[e].NOMBRE : this.especificacion[e].PLACEHOLDER}</label>`;
                    }
                    if(this.especificacion[e].AYUDA !== undefined)
                        aux += `<small class="form-text text-muted">${this.especificacion[e].AYUDA}</small>`;
                    
                    if(this.especificacion[e].TIPO == "TP_FILE") {
                        let valid = this.especificacion[e].VALID;
                        let invalid = this.especificacion[e].INVALID;
                        let browser = this.especificacion[e].BROWSER;
                        aux += `<label data-invalid="${invalid}" data-valid="${valid}" class="custom-file-label mb-0 text-truncate" data-browse="${browser}" for="${AUX_nombre}"></label>`;
                        if(this.especificacion[e].SIMPLE === undefined)
                            aux = `<img id="src-${AUX_nombre}" class="w-100 mx-auto d-block mb-1 img-thumbnail" src="" onError="this.src='${urlFile}'" /><div class="custom-file">${aux}</div>`;
                        else
                            aux = `<div class="custom-file">${aux}</div>`;
                        if(e == "curriculum") {
                            aux = `<div class="input-group">${aux}<div class="input-group-append"><button class="btn btn-danger" type="button"><i class="fas fa-times-circle"></i></button></div></div>`;
                        }
                    }
                    if((this.especificacion[e].TIPO == "TP_FECHA" && this.especificacion[e].SIMPLE === undefined) || (this.especificacion[e].MULTIPLE !== undefined && this.especificacion[e].MULTIPLE))
                        aux = `<label class="mb-0" for="${AUX_nombre}">${this.especificacion[e].NOMBRE}</label>` + aux;
                    if(this.especificacion[e].TIPO == "TP_COLOR") {
                        auxx = `<div class="input-group">`;
                            auxx += aux;
                            auxx += `<input type="text" class="form-control text-right" pattern="^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$" value="#000000" onfocus="this.select()" onchange="changeColor(this,1);" id="hexcolor"/>`;
                        auxx += `</div>`;
                        aux = auxx;
                    }
                    if(this.objeto.JSON !== undefined) {
                        if(this.objeto.JSON[e] !== undefined) {
                            aux = "";
                            for(let j in this.objeto.JSON[e]) {
                                if(this.especificacion[e].TIPO == "TP_FILE") {
                                    let valid = this.especificacion[e].VALID;
                                    let invalid = this.especificacion[e].INVALID;
                                    let browser = this.especificacion[e].BROWSER;
                                    auxx = this.inputAdecuado(this.especificacion[e], e, `${AUX_nombre}_${j}`, STR_class, OBJ_funcion, `${this.especificacion[e]["NOMBRE"]} - ${this.objeto.JSON[e][j]}`, multiple);
                                    aux += `<div class="custom-file">${auxx}<label data-invalid="${invalid}" data-valid="${valid}" class="custom-file-label mb-0 text-truncate" data-browse="${browser}" for="${AUX_nombre}"></label></div>`;
                                } else
                                    aux += this.inputAdecuado(this.especificacion[e], e, `${AUX_nombre}_${j}`, STR_class, OBJ_funcion, `${this.especificacion[e]["NOMBRE"]} - ${this.objeto.JSON[e][j]}`, multiple);
                            }
                        }
                    }
                }
                if(auxHTML == "") auxHTML = row[e];
                
                auxROW = auxHTML.replace(`/${e}/`,aux);
                TEXT_row += auxROW;
            }
            TEXT_row += '</div>';
            formulario += TEXT_row;
        }
		
		return `<div class="contenedorForm w-100" id="form_${this.entidad + (id != "" ? "_" + id : "")}">${formulario}</div>`;
    }
    /**
     * 
     */
    this.inputAdecuado = function(OBJ_elemento,ATTR_nombre,TAG_nombre,STR_class,OBJ_funcion,placeholder = "", multiple = null) {
        if(OBJ_elemento['NOMBRE'] === undefined) OBJ_elemento['NOMBRE'] = ATTR_nombre;
        if(OBJ_elemento['NAME'] === undefined) OBJ_elemento['NAME'] = ATTR_nombre;
        if(this.objeto.MINUSCULA === undefined)
            OBJ_elemento['NOMBRE'] = (OBJ_elemento['NOMBRE']).toUpperCase();
    
        if(OBJ_elemento['VISIBILIDAD'] == 'TP_VISIBLE' || OBJ_elemento['VISIBILIDAD'] == 'TP_VISIBLE_FORM') {
            console.log(OBJ_elemento['TIPO'])
            switch(OBJ_elemento['TIPO']) {
                case 'TP_ENTERO':
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"number",STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_CHECK':
                    return this.check(OBJ_elemento,`${TAG_nombre}`,STR_class,OBJ_funcion,multiple);
                case 'TP_PHONE':
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"phone",STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_EMAIL':
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"email",STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_COLOR':
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"color",STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_FILE':
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"file",STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_STRING':
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"text",STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_TEXT':
                    return this.inputText(OBJ_elemento,`${TAG_nombre}`,STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_FECHA':
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"date",STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_PASSWORD':
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"password",STR_class,OBJ_funcion,placeholder,multiple);
                case 'TP_ENUM':
                    return this.select(OBJ_elemento,`${TAG_nombre}`,STR_class,OBJ_funcion,OBJ_elemento["ENUM"],placeholder,multiple);
                default:
                    return this.inputString(OBJ_elemento,`${TAG_nombre}`,"text",STR_class,OBJ_funcion,placeholder,multiple);
            }
        } else return this.inputString(OBJ_elemento,`${TAG_nombre}`,"hidden",STR_class,placeholder,multiple);
    }
    this.check = function(OBJ_elemento,STR_nombre,STR_class,OBJ_funcion = null, multiple = null) {
        let STR_funcion = "";
        let necesario = 0;
        let inputData = "";
        let input = "";
		if(OBJ_elemento.NECESARIO !== undefined) necesario = OBJ_elemento.NECESARIO;
        if(OBJ_elemento.DISABLED === undefined) OBJ_elemento.DISABLED = 0;

        if(STR_class == "form-control") STR_class = "";
        if(STR_class != "") STR_class += " ";
        if(OBJ_elemento.CLASS !== undefined) {
            if(STR_class != "") STR_class += " ";
            STR_class += OBJ_elemento.CLASS;
        }
        if(necesario)
            inputData = "required='true'";
        if(OBJ_funcion !== null) {
            for(var i in OBJ_funcion) {
                if(typeof OBJ_funcion[i] == "string") {
                    if(STR_funcion != "") STR_funcion += " ";
                    STR_funcion += `${i}="${OBJ_funcion[i]}"`;
                } else {//SOLO PARA FILE
                    if(STR_funcion != "") STR_funcion += " ";
                    let aux = OBJ_funcion[i].F;
                    let aux_nombre = OBJ_funcion[i].C;
                    if(multiple !== null) {
                        nameAUX = STR_nombre.split("_");

                        name = `${nameAUX[0]}_${multiple}[]`;
                        aux_nombre = `${multiple}_${aux_nombre}_${nameAUX[nameAUX.length - 1]}`;
                    }
                    aux = aux.replace(`/${OBJ_funcion[i].C}/`,`${aux_nombre}`);
                    
                    STR_funcion += `${i}="${aux}"`;
                }
            }
            if(inputData != "") inputData += " ";
            inputData += STR_funcion;
        }
        name = STR_nombre;
        STR_id = STR_nombre;
        if(multiple !== null) {
            nameAUX = STR_nombre.split("_");
            name = `${nameAUX[0]}_${multiple}[]`;
            STR_id = `${multiple}_${STR_id}`;
        }
        input += `<div class="form-check">`;
            input += `<input  value="${OBJ_elemento.DEFAULT !== undefined ? OBJ_elemento.DEFAULT : '1'}" ${(OBJ_elemento["DISABLED"] ? "disabled='true'" : "")} ${inputData} name="${name}" id="${STR_id}" class="${STR_class}" type="checkbox" >`;
            input += `<label class="form-check-label ml-2" for="${STR_id}">${OBJ_elemento.NOMBRE}</label>`;
        input += `</div>`;

        return input;
    }
    this.inputString = function(OBJ_elemento,STR_nombre,STR_type,STR_class,OBJ_funcion = null, placeholder = "", multiple = null) {
        let STR_funcion = "";
        let necesario = 0;
        let inputData = "";
		if(OBJ_elemento.NECESARIO !== undefined) necesario = OBJ_elemento.NECESARIO;
        if(OBJ_elemento.DISABLED === undefined) OBJ_elemento.DISABLED = 0;

        if(STR_class != "") STR_class += " ";
        switch (STR_type) {
            case "number":
                if(OBJ_elemento.SIMPLE === undefined)
                    STR_type = "text";
                STR_class += " texto-numero text-right";
            break;
            case "password":
                STR_class += " texto-password";
            break;
            case "text":
                STR_class += " texto-text";
            break;
            case "date":
                STR_class += " texto-date";
                break;
            case "file":
                STR_class += " custom-file-input invalid";
                break;
        }
        if(OBJ_elemento.CLASS !== undefined) {
            if(STR_class != "") STR_class += " ";
            STR_class += OBJ_elemento.CLASS;
        }
        if(necesario)
            inputData = "required='true'";
        if(OBJ_funcion !== null) {
            for(var i in OBJ_funcion) {
                if(typeof OBJ_funcion[i] == "string") {
                    if(STR_funcion != "") STR_funcion += " ";
                    STR_funcion += `${i}="${OBJ_funcion[i]}"`;
                } else {//SOLO PARA FILE
                    if(STR_funcion != "") STR_funcion += " ";
                    let aux = OBJ_funcion[i].F;
                    aux = aux.replace(`/${OBJ_funcion[i].C}/`,`src-${STR_nombre}`);
                    
                    STR_funcion += `${i}="${aux}"`;
                }
            }
            if(inputData != "") inputData += " ";
            inputData += STR_funcion;
        }
        if(OBJ_elemento.MAXLENGTH !== undefined) {
            if(inputData != "") inputData += " ";
            inputData += `maxlength="${OBJ_elemento.MAXLENGTH}"`;
        }
        if(STR_type == "file") {
            if(OBJ_elemento.ACCEPT !== undefined) {
                if(inputData != "") inputData += " ";
                inputData += `accept="${OBJ_elemento.ACCEPT}"`;
            }
        }
        name = STR_nombre;
        STR_id = STR_nombre;
        if(multiple !== null) {
            nameAUX = STR_nombre.split("_");
            name = `${nameAUX[0]}_${multiple}[]`;
            STR_id = `${multiple}_${STR_id}`;
        }

        input = `<input ${STR_type == "number" ? 'min="0"' : ""} value="${OBJ_elemento.DEFAULT !== undefined ? OBJ_elemento.DEFAULT : ''}" ${(OBJ_elemento["DISABLED"] ? "disabled='true'" : "")} ${OBJ_elemento.READONLY === undefined ? '' : 'readonly'} ${inputData} name="${name}" id="${STR_id}" class="${STR_class}" type="${STR_type}" placeholder="${placeholder == "" ? OBJ_elemento["NOMBRE"] : placeholder}" />`;

        if(OBJ_elemento.FIELDSET !== undefined)
            return `<fieldset><legend>${placeholder == "" ? OBJ_elemento.NOMBRE : placeholder}</legend>${input}</fieldset>`;
        return input;
    }
    this.inputText = function(OBJ_elemento,STR_nombre,STR_class,OBJ_funcion = null, placeholder = "", multiple = null) {
        let STR_funcion = "";
        let necesario = 0;
        if(OBJ_elemento.NECESARIO !== undefined) necesario = OBJ_elemento.NECESARIO;
        if(OBJ_elemento.DISABLED === undefined) OBJ_elemento.DISABLED = 0;
        if(OBJ_funcion !== null) {
            for(var i in OBJ_funcion) {
                if(typeof OBJ_funcion[i] == "string") {
                    if(STR_funcion != "") STR_funcion += " ";
                    STR_funcion += `${i}="${OBJ_funcion[i]}"`;
                } else {//SOLO PARA FILE
                    if(STR_funcion != "") STR_funcion += " ";
                    let aux = OBJ_funcion[i].F;
                    aux = aux.replace(`/${OBJ_funcion[i].C}/`,`src_${STR_nombre}`);
                    
                    STR_funcion += `${i}="${aux}"`;
                }
            }
        }
        if(OBJ_elemento.EDITOR !== undefined) {
            if(STR_class != "") STR_class += " ";
            STR_class += "ckeditor";
        }
        name = STR_nombre;
        STR_id = STR_nombre;
        if(multiple !== null) {
            nameAUX = STR_nombre.split("_");
            name = `${nameAUX[0]}_${multiple}[]`;
            STR_id = `${multiple}_${STR_id}`;
        }
        if(OBJ_elemento.MAXLENGTH !== undefined) {
            if(STR_funcion != "") STR_funcion += " ";
            STR_funcion += `maxlength="${OBJ_elemento.MAXLENGTH}"`;
        }

        textarea = `<textarea data-maxlen="10" ${(necesario ? "required='true'" : "")} ${(OBJ_elemento["DISABLED"] ? "disabled='true'" : "")} ${STR_funcion} name="${name}" id="${STR_id}" class="${STR_class}" placeholder="${placeholder == "" ? OBJ_elemento.NOMBRE : placeholder}"></textarea>`;
        if(OBJ_elemento.FIELDSET !== undefined)
            return `<fieldset><legend>${placeholder == "" ? OBJ_elemento.NOMBRE : placeholder}</legend>${textarea}</fieldset>`;
		return textarea;
    }
    
    this.select = function(OBJ_elemento,STR_nombre,STR_class,OBJ_funcion,OBJ_datos = null,placeholder = null, multiple = null) {
		let STR_funcion = "";
        if(OBJ_elemento.MULTIPLE === undefined) OBJ_elemento.MULTIPLE = 0;
        if(OBJ_elemento.COMUN === undefined) OBJ_elemento.COMUN = 0;
		if(OBJ_elemento.DISABLED === undefined) OBJ_elemento.DISABLED = 0;
		if(OBJ_funcion !== null) {
            for(var i in OBJ_funcion) {
                if(typeof OBJ_funcion[i] == "string") {
                    if(STR_funcion != "") STR_funcion += " ";
                    STR_funcion += `${i}="${OBJ_funcion[i]}"`;
                } else {//SOLO PARA FILE
                    if(STR_funcion != "") STR_funcion += " ";
                    let aux = OBJ_funcion[i].F;
                    aux = aux.replace(`/${OBJ_funcion[i].C}/`,`src_${STR_nombre}`);
                    
                    STR_funcion += `${i}="${aux}"`;
                }
            }
        }
        
        name = STR_nombre;
        STR_id = STR_nombre;
        if(multiple !== null) {
            nameAUX = STR_nombre.split("_");
            name = `${multiple}_${nameAUX[0]}[]`;
            STR_id = `${multiple}_${STR_id}`;
        } else if(OBJ_elemento["MULTIPLE"]) 
            name += '[]';
        
        let return_STR = `<select ${(OBJ_elemento["MULTIPLE"] ? "multiple='true'" : "data-allow-clear='true'")} ${(OBJ_elemento.DISABLED ? "disabled='true'" : "")} ${(OBJ_elemento["NECESARIO"] ? "required='true'" : "")} ${STR_funcion} name="${name}" id="${STR_id}" class="${STR_class} select__2 w-100" style="width:100%" data-tags="true" data-placeholder="${OBJ_elemento["NOMBRE"]}">`;
        
        if(!OBJ_elemento.MULTIPLE && !OBJ_elemento.COMUN)
            return_STR += `<option></option>`;
        else if(OBJ_elemento.COMUN)
            return_STR += `<option value="" hidden selected>${OBJ_elemento["NOMBRE"]}</option>`;
        if(OBJ_datos === null) {
            if(dataPYRUS !== null) {
                if(dataPYRUS[OBJ_elemento.NAME] !== undefined) {
                    for(let i in dataPYRUS[OBJ_elemento.NAME].DATA) {
                        option = "";
                        if(dataPYRUS[OBJ_elemento.NAME].TIPO == "JSON") {
                            aux = JSON.parse(dataPYRUS[OBJ_elemento.NAME].DATA[i]);
                            for(let x in aux) {
                                if(option != "") option += " / ";
                                option += aux[x];
                            }
                        } else
                            option = dataPYRUS[OBJ_elemento.NAME].DATA[i]
                        return_STR += `<option value="${i}">${option}</option>`;
                    }
                }
            }
        } else {
            for(let i in OBJ_datos)
                return_STR += `<option value="${i}">${OBJ_datos[i]}</option>`;
        }
		return_STR += "</select>";
		return return_STR;
	}
    
    /* ----------------- */
	return this.constructor();
}